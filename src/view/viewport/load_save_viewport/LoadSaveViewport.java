/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.viewport.load_save_viewport;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import model.ModelViewBundle;
import mvc_bridgeway.command.model_command.LoadCommand;
import mvc_bridgeway.command.model_command.SaveCommand;
import mvc_bridgeway.control.virtual_control.swing_control.ButtonSwingControl;
import mvc_bridgeway.control_map.ControlMap;
import view.viewport.Viewport;

/**
 *
 * @author comcc_000
 */
public class LoadSaveViewport extends Viewport {

    /*Properties*/
    
    public static final SaveMode SAVE  = new SaveMode();
    public static final LoadMode LOAD  = new LoadMode();
    private Mode currentMode;
    
    /*Constructors*/
    
    public LoadSaveViewport(Mode mode) {
        initComponents();
        setMode(mode);
        generateView();
    }

    /*Methods*/
    
    @Override
    protected void generateView() {
        currentMode.setDialogueType();
        jFileChooser1.setCurrentDirectory(new File("./resources/save_files"));
    }

    @Override
    public void update(ModelViewBundle mvb) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public ArrayList<ControlMap> getControlMaps() {
        return currentMode.generateControlMaps();
    }
    
    /*Get-Sets*/

    public File getFile() {
        return jFileChooser1.getSelectedFile();
    }
    
    private void setMode(Mode mode) {
        currentMode = mode.getNew(jFileChooser1, confirmButton, this);
    }
    
    /*Inner-Classes*/
    
    private abstract static class Mode {
        
        protected JFileChooser fileChooser;
        protected JButton button;
        protected LoadSaveViewport viewport;
        
        public Mode() {
            //
        }
        
        public Mode(JFileChooser fileChooser, JButton button, LoadSaveViewport viewport) {
            this.fileChooser = fileChooser;
            this.button = button;
            this.viewport = viewport;
        }
        
        public abstract void setDialogueType();
        public abstract ArrayList<ControlMap> generateControlMaps();
        public abstract Mode getNew(JFileChooser fileChooser, JButton button, LoadSaveViewport viewport);
        
    }
    
    private static class SaveMode extends Mode {
        
        public SaveMode() {
            super();
        }
        
        public SaveMode(JFileChooser fileChooser, JButton button, LoadSaveViewport viewport) {
            super(fileChooser, button, viewport);
        }
        
        @Override
        public void setDialogueType() {
            fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        }
        
        @Override
        public ArrayList<ControlMap> generateControlMaps() {
            ArrayList<ControlMap> controlMaps = new ArrayList<ControlMap>();
            controlMaps.add(new ControlMap( new ButtonSwingControl(button), new SaveCommand(viewport)));
            return controlMaps;
        }
        
        @Override
        public Mode getNew(JFileChooser fileChooser, JButton button, LoadSaveViewport viewport) {
            return new SaveMode(fileChooser, button, viewport);
        }
    }
    
    private static class LoadMode extends Mode {
        
        public LoadMode() {
            super();
        }
        
        public LoadMode(JFileChooser fileChooser, JButton button, LoadSaveViewport viewport) {
            super(fileChooser, button, viewport);
        }
        
        @Override
        public void setDialogueType() {
            fileChooser.setDialogType(JFileChooser.OPEN_DIALOG); //this is the default anyways
        }
        
        @Override
        public ArrayList<ControlMap> generateControlMaps() {
            ArrayList<ControlMap> controlMaps = new ArrayList<ControlMap>();
            controlMaps.add(new ControlMap( new ButtonSwingControl(button), new LoadCommand(viewport)));
//            controlMaps.add(new ControlMap( new ButtonSwingControl(button), new LaunchScreenCommand(new HomeScreen())));
            return controlMaps;
        }
        
        @Override
        public Mode getNew(JFileChooser fileChooser, JButton button, LoadSaveViewport viewport) {
            return new LoadMode(fileChooser, button, viewport);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        confirmButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());
        add(jFileChooser1, java.awt.BorderLayout.CENTER);

        confirmButton.setText("Confirm");
        add(confirmButton, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmButton;
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables

}
