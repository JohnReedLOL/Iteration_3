/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.viewport;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JPanel;
import model.ModelViewBundle;
import model.entity.ability.Ability;
import model.entity.avatar.Avatar;
import mvc_bridgeway.command.model_command.ActivateAbility;
import mvc_bridgeway.control.virtual_control.swing_control.ButtonSwingControl;
import mvc_bridgeway.control_map.ControlMap;

/**
 *
 * @author comcc_000
 */
public class SkillsViewport extends Viewport {
    
    /*Properities*/

    private ArrayList<AbilityRow> abilityRows = new ArrayList<AbilityRow>();
    private ArrayList<ControlMap> cms = new ArrayList<ControlMap>();
    
    /*Constructors*/
    
    public SkillsViewport() {
        initComponents();
        generateView();
    }
    
    /*Methods*/
    
    @Override
    protected void generateView() {
        //do nothing in this case
    }
    
    @Override
    public void update(ModelViewBundle mvb) {
        List<Ability> abilities = mvb.getLearnedAbilities();
        Avatar avatar = mvb.getAvatar();
        displayAbilities(abilities, avatar);
        updateInspectionDetails(mvb.getCurrentKnownInfo());
    }

    @Override
    public ArrayList<ControlMap> getControlMaps() {
        return cms;
    }
    
    private void displayAbilities(List<Ability> abilities, Avatar avatar) {
        if (abilities != null && abilities.size() != abilityRows.size()) {
            clearAbilityRows();
            clearCMs();
            for (Ability ability : abilities) {
                abilityRows.add(new AbilityRow(jPanel1, ability, avatar));
            }
            this.validate();
            flagRefreshController();
        }
    }
    
    private void updateInspectionDetails(String details) {
        inspectionDetailsTextArea.setText(details);
    }
    
    private void clearAbilityRows() {
        for (AbilityRow abilityRow : abilityRows) {
            abilityRow.remove(jPanel1);
        }
        abilityRows = new ArrayList<AbilityRow>();
    }
    
    private void clearCMs() {
        cms = new ArrayList<ControlMap>();
    }
    
    /*Inner-Classes*/
    
    private class AbilityRow {
        
        private Ability ability;
        private Avatar avatar;
        //
        private JButton button;
        
        public AbilityRow(JPanel panel, Ability ab, Avatar avat) {
            ability = ab;
            avatar = avat;
            button = initAbilityButton(ab);
            setControl(button, ab, avat);
            panel.add(button);
        }
        
        public void remove(JPanel panel) {
            panel.remove(button);
        }
        
        private JButton initAbilityButton(Ability ab) {
            String abilityName = ab.getName();
            JButton jButton = new JButton(abilityName);
            return jButton;
        }
        
        private void setControl(JButton jButton, Ability ab, Avatar avat) {
            cms.add(new ControlMap(new ButtonSwingControl(jButton), new ActivateAbility(avat, ab)));
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inspectionDetailsTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText("Abilities:");
        jPanel1.add(jLabel1);

        add(jPanel1, new java.awt.GridBagConstraints());

        inspectionDetailsTextArea.setColumns(20);
        inspectionDetailsTextArea.setRows(5);
        jScrollPane1.setViewportView(inspectionDetailsTextArea);

        add(jScrollPane1, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea inspectionDetailsTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
  
}
